#!/usr/bin/env ruby

require 'optparse'
require 'pp'
require 'yaml'

require 'wrkflo/wrkflo'


# Abort execution with the given message, exiting with the given status code.
def error_out message, status: 1
  $stderr.puts message
  $stderr.puts "Run `wrkflo --help` for usage information."
  exit status
end


options = {
  backward: false,
  profile: ENV['HOME'] + '/.wrkflo/config',
  project: nil
}
OptionParser.new do |opts|
  opts.banner     = "Usage: wrkflo [options] <project>"
  opts.separator  "Start working on things faster with predefined workflows"
  opts.version    = "0.0.2"

  opts.on("-b", "--backward", "Reverse step order and undo compatible steps") do |b|
    options[:backward] = b
  end

  opts.on("-f [FILE]", "--file [FILE]",
      "The file to interpret as the wrkflo profile.",
      "Defaults to \"~/.wrkflo/config\"") do |file|
    options[:profile] = file
  end

  begin
    # Parse and remove options from ARGV.
    opts.parse!
  rescue OptionParser::ParseError => error
    # Without this rescue, Ruby would print the stack trace
    # of the error. Instead, we want to show the error message,
    # suggest -h or --help, and exit 1.
    error_out(error)
  end
end


project_name = ARGV[0]
error_out('No project specified.') if project_name.nil?

# An object representation of the entire wrkflo profile, merged with
# the options given for this run.
wrkflo = WrkFlo.new(options)
# The project workflow to execute on this run.
project = wrkflo[project_name]
# If no project was specified, notify and exit
if project == nil
  error_out("Project '#{project_name}' does not exist in '#{wrkflo.profile_source}'.")
end

# Run the project workflow in the direction given from the terminal
case wrkflo.direction
when :forward
  project.run
when :backward
  project.unrun
end
